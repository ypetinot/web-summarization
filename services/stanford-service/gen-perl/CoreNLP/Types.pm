#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

package CoreNLP::ParseTree;
use base qw(Class::Accessor);
CoreNLP::ParseTree->mk_accessors( qw( tree score ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{tree} = undef;
  $self->{score} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{tree}) {
      $self->{tree} = $vals->{tree};
    }
    if (defined $vals->{score}) {
      $self->{score} = $vals->{score};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ParseTree';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{tree});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::DOUBLE) {
        $xfer += $input->readDouble(\$self->{score});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ParseTree');
  if (defined $self->{tree}) {
    $xfer += $output->writeFieldBegin('tree', TType::STRING, 1);
    $xfer += $output->writeString($self->{tree});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{score}) {
    $xfer += $output->writeFieldBegin('score', TType::DOUBLE, 2);
    $xfer += $output->writeDouble($self->{score});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package CoreNLP::NamedEntity;
use base qw(Class::Accessor);
CoreNLP::NamedEntity->mk_accessors( qw( entity tag startOffset endOffset sentence_number ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{entity} = undef;
  $self->{tag} = undef;
  $self->{startOffset} = undef;
  $self->{endOffset} = undef;
  $self->{sentence_number} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{entity}) {
      $self->{entity} = $vals->{entity};
    }
    if (defined $vals->{tag}) {
      $self->{tag} = $vals->{tag};
    }
    if (defined $vals->{startOffset}) {
      $self->{startOffset} = $vals->{startOffset};
    }
    if (defined $vals->{endOffset}) {
      $self->{endOffset} = $vals->{endOffset};
    }
    if (defined $vals->{sentence_number}) {
      $self->{sentence_number} = $vals->{sentence_number};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'NamedEntity';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{entity});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{tag});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{startOffset});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{endOffset});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{sentence_number});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('NamedEntity');
  if (defined $self->{entity}) {
    $xfer += $output->writeFieldBegin('entity', TType::STRING, 1);
    $xfer += $output->writeString($self->{entity});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{tag}) {
    $xfer += $output->writeFieldBegin('tag', TType::STRING, 2);
    $xfer += $output->writeString($self->{tag});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{startOffset}) {
    $xfer += $output->writeFieldBegin('startOffset', TType::I32, 3);
    $xfer += $output->writeI32($self->{startOffset});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{endOffset}) {
    $xfer += $output->writeFieldBegin('endOffset', TType::I32, 4);
    $xfer += $output->writeI32($self->{endOffset});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{sentence_number}) {
    $xfer += $output->writeFieldBegin('sentence_number', TType::I32, 5);
    $xfer += $output->writeI32($self->{sentence_number});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package CoreNLP::TaggedToken;
use base qw(Class::Accessor);
CoreNLP::TaggedToken->mk_accessors( qw( tag token ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{tag} = undef;
  $self->{token} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{tag}) {
      $self->{tag} = $vals->{tag};
    }
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TaggedToken';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{tag});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TaggedToken');
  if (defined $self->{tag}) {
    $xfer += $output->writeFieldBegin('tag', TType::STRING, 1);
    $xfer += $output->writeString($self->{tag});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 2);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package CoreNLP::SerializedException;
use base qw(Thrift::TException);
use base qw(Class::Accessor);
CoreNLP::SerializedException->mk_accessors( qw( payload ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{payload} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{payload}) {
      $self->{payload} = $vals->{payload};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SerializedException';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{payload});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SerializedException');
  if (defined $self->{payload}) {
    $xfer += $output->writeFieldBegin('payload', TType::STRING, 1);
    $xfer += $output->writeString($self->{payload});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

1;
