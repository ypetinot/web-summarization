#!/usr/bin/env perl

use strict;
use warnings;

use FindBin;
use lib "${FindBin::Bin}/../../src/perl/";
use lib "${FindBin::Bin}/../../third-party/local/lib/";

use Getopt::Long;
use Pod::Usage;
use Text::Trim;

my $man = 0;
my $help = 0;
my $debug = 0;
my $order = 1;

Getopt::Long::Configure ("bundling");
GetOptions('help|?' => \$help, man => \$man, 'debug|d' => \$debug, 'order=i' => \$order) or pod2usage(2);
pod2usage(1) if ( $help );
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

# TODO : add support for order parameter

my @urls;
my %token2ids;

my $output_dir = $ARGV[ 0 ];

if ( ! -d $output_dir ) {
    die "Usage: $0 <output-dir>";
}

my $output_token2ids = join( "/" , $output_dir , "token2ids.map" );
my $output_token2stats = join( "/" , $output_dir , "token2stats.map" );
my $output_id2url = join( "/" , $output_dir , "url2id.map" );

sub _select_constructs {

    my $order = shift;
    my $raw_chunks = shift;

    # for now we ignore the order parameter ...
    my @constructs = map { [ lc( $_->[ 0 ] ) ]; } grep { $_->[ 1 ] !~ m/^\p{Punct}+$/ && $_->[ 1 ] !~ m/DT/ } @{ $raw_chunks };

    return \@constructs;

}

open ID_2_URL , ">$output_id2url" or die "Unable to open file ($output_token2ids) : $!";

# scan all summaries
while ( <STDIN> ) {

    chomp;
    
    my @fields = split /\t/, $_;
    my $url = shift @fields;
    my $summary_chunked = shift @fields;

    # keep track of URLs
    push @urls, $url;
    my $url_id = scalar( @urls ) - 1;
    print ID_2_URL join( "\t" , $url_id , $url ) . "\n";

    my @summary_chunks = map { my @tokens = split /\//, $_; \@tokens; } split /\s+/, $summary_chunked;

    my @selected_constructs = @{ _select_constructs( $order , \@summary_chunks ) };

    my %seen;
    foreach my $selected_construct (@selected_constructs) {

	my $selected_construct_surface = join( " " , @{ $selected_construct } );

	if ( ! $seen{ $selected_construct_surface } ) {

	    if ( ! defined( $token2ids{ $selected_construct_surface } ) ) {
		$token2ids{ $selected_construct_surface } = [];
	    }

	    push @{ $token2ids{ $selected_construct_surface } } , $url_id;

	}

	$seen{ $selected_construct_surface }++;

    }

}

close ID_2_URL;

# rank and output
open TOKEN_2_IDS , ">$output_token2ids" or die "Unable to open file ($output_token2ids) : $!";
open TOKEN_2_STATS, ">$output_token2stats" or die "Unable to open file ($output_token2stats) : $!";

map {

    # token -> url ids
    print TOKEN_2_IDS join( "\t" , $_ , join( " " , @{ $token2ids{ $_ } } ) ) . "\n";

    # token stats
    my $token_prior = scalar( @{ $token2ids{ $_ } } ) / scalar( @urls );
    print TOKEN_2_STATS join( "\t" , $_ , $token_prior ) . "\n";
    
} sort { scalar( @{ $token2ids{ $b } } ) <=> scalar( @{ $token2ids{ $a } } ) } grep { scalar( @{ $token2ids{ $_ } } ) >= 5 } keys( %token2ids );

close TOKEN_2_STATS;
close TOKEN_2_IDS;

1;
