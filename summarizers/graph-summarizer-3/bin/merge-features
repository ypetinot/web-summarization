#!/usr/bin/env perl

use strict;
use warnings;

use FindBin;
use lib "${FindBin::Bin}/../src/";
use lib "${FindBin::Bin}/../../../src/perl/";
use lib "${FindBin::Bin}/../../graph-summarizer/src/";
use lib "${FindBin::Bin}/../../../third-party/local/lib/";

use Getopt::Long;
use JSON;
use Pod::Usage;
use Text::Trim;

my $man = 0;
my $help = 0;
my $debug = 0;
my $no_index = 0;

Getopt::Long::Configure ("bundling");
GetOptions('help|?' => \$help, man => \$man, 'debug|d' => \$debug, 'no-index' => \$no_index) or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;
pod2usage(-exitstatus => 0) if ( $#ARGV != 0 );

my $features_definition_file = $ARGV[0];

my %key2index;
open FEATURES_DEFINITION_FILE, $features_definition_file or die "Unable to open features definition file ($features_definition_file): $!";
while ( <FEATURES_DEFINITION_FILE> ) {

    chomp;
    my @definition_fields = split /\t/, trim($_);
    my $key = shift @definition_fields;
    my $index = shift @definition_fields;
    my $surface = shift @definition_fields;

    $key2index{ $key } = $index;

}
close FEATURES_DEFINITION_FILE;

while ( <STDIN> ) {

    chomp;
    
    my @fields = split /\t/, $_;
    my $url = shift @fields;
    my @feature_sets = map { decode_json( $_ ); } @fields;
    
    my %merged_features;
    foreach my $feature_set (@feature_sets) {
	
	# Feature sets are expected to be *non-overlapping* ...
	if ( $no_index ) {
	    map { $merged_features{ $_ } = $feature_set->{ $_ }; } keys( %{ $feature_set } );
	}
	else {
	    map { $merged_features{ $key2index{ $_ } } = $feature_set->{ $_ }; } keys( %{ $feature_set } );
	}

    }

    print join("\t", $url, encode_json( \%merged_features )) . "\n";

}

1;
